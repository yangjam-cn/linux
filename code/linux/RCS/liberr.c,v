head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2020.08.31.06.06.52;	author youngjam;	state Exp;
branches;
next	1.1;

1.1
date	2020.08.31.02.27.12;	author youngjam;	state Exp;
branches;
next	;


desc
@building test.
@


1.2
log
@add comment
@
text
@#include <errno.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "liberr.h"

/*
 * 函数在堆栈中的分配
 * 堆栈地址由高向低分配,当执行函数时,先将参数列表入栈,压入高址部分,然后入栈函数的返回地址,接着入栈函数的执行代码,分布如下:
 * 最后一个参数
 * 倒数第二个参数
 * ...
 * 第一个参数
 * 函数返回地址
 * 函数代码段
 */

void err_ret(const char *fmt, ...)
{
    va_list ap;

    va_start(ap, fmt);    /*获取第一个可变参数fmt的堆栈地址*/
    err_prn(fmt, ap, NULL);
    va_end(ap);           /*将ap指针置空*/
    return;
}

void err_quit(const char *fmt, ...)
{
    va_list ap;
    
    va_start(ap, fmt);
    err_prn(fmt, ap, NULL);
    va_end(ap);
    exit(EXIT_FAILURE);
}

void log_ret(char *logfile, const char *fmt, ...)
{
    va_list ap;

    va_start(ap, fmt);
    err_prn(fmt, ap, logfile);
    va_end(ap);
    return;
}

void log_quit(char *logfile, const char *fmt, ...)
{
    va_list ap;

    va_start(ap, fmt);
    err_prn(fmt, ap, logfile);
    va_end(ap);
    exit(EXIT_FAILURE);
}

extern void err_prn(const char *fmt, va_list ap, char *logfile)
{
    int save_err;
    char buf[MAXLINELEN];
    FILE *plf;

    save_err = errno;
    /*将通过可变参数列表ap传递的参数以fmt的形式写到buf中*/
    vsprintf(buf, fmt, ap);
    /*将错误码转化为错误信息写到buf的尾部*/
    sprintf(buf + strlen(buf), ": %s", strerror(save_err));
    /*向buf尾部追加换行符*/
    strcat(buf, "\n");
    /*刷新标准输出流*/
    fflush(stdout);
    if (logfile != NULL)
    {
        /*以追加内容的形式打开文件*/
        if ((plf = fopen(logfile, "a")) != NULL)
        {
            fputs(buf, plf);    /*将buf中的内容写到文件中*/
            fclose(plf);
        }
        else
        {
            fputs("failed to open log file\n", stderr);
        }
    }
    else
    {
        fputs(buf, stderr);   /*将buf的内容输出到标准错误流*/
    }
    fflush(NULL);
    return;
}@


1.1
log
@Initial revision
@
text
@d8 11
d23 1
a23 1
    va_start(ap, fmt);
d25 1
a25 1
    va_end(ap);
d66 1
d68 1
d70 1
d72 1
d76 1
d79 1
a79 1
            fputs(buf, plf);
d89 1
a89 1
        fputs(buf, stderr);
@
