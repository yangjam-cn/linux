head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2020.08.31.11.12.11;	author youngjam;	state Exp;
branches;
next	;


desc
@test mstat.
@


1.1
log
@Initial revision
@
text
@#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/sysmacros.h>

int main(int argc, char **argv)
{
    struct stat buf;
    mode_t      mode;
    char        type[80];
    int         fd;

    /*检查输入参数*/
    if (argc != 2)
    {
        puts("USAGE: mstat {file}");
        exit(EXIT_FAILURE);
    }

    if ((fd = open(argv[1], O_RDONLY)) < 0)
    {
        perror("open");
        exit(EXIT_FAILURE);
    }

    /*获取文件信息*/
    if (fstat(fd, &buf) < 0)
    {
        perror("fstat");
        exit(EXIT_FAILURE);
    }

    mode = buf.st_mode;    /*文件类型*/
    printf("    FILE: %s\n", argv[1]);
    printf("   INODE: %ld\n", buf.st_ino);
    printf("  DEVICE: %d, %d\n", major(buf.st_dev), minor(buf.st_dev));
    printf("    MODE: %o\n", mode & ~(__S_IFMT));    /*文件权限*/
    printf("   LINKS: %ld\n", buf.st_nlink);
    printf("     UID: %d\n", buf.st_uid);
    printf("     GID: %d\n", buf.st_gid);
    if (S_ISLNK(mode))
        strcpy(type, "Symbolic link.");
    else if (S_ISREG(mode))
        strcpy(type, "Regular file.");
    else if (S_ISDIR(mode))
        strcpy(type, "Directory.");
    else if (S_ISCHR(mode))
        strcpy(type, "Character device.");
    else if (S_ISBLK(mode))
        strcpy(type, "Block device.");
    else if (S_ISFIFO(mode))
        strcpy(type, "FIFO.");
    else 
        strcpy(type, "Unknow type.");
    printf("    TYPE: %s\n", type); 
    printf("    SIZE: %ld\n", buf.st_size);
    printf("BLK SIZE: %ld\n", buf.st_blksize);
    printf("  BLOCKS: %d\n", (int)buf.st_blocks);
    printf("ACCESSED: %s\n", ctime(&buf.st_atime));
    printf("MODIFIED: %s\n", ctime(&buf.st_mtime));
    printf(" CHANGED: %s\n", ctime(&buf.st_ctime));

    if (close(fd) < 0)
    {
        perror("close");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}@
