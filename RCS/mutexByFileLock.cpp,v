head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2020.10.05.13.55.47;	author yungjam;	state Exp;
branches;
next	;


desc
@test fcntl function
@


1.1
log
@Initial revision
@
text
@#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <fcntl.h>
#include <errno.h>

void err(const char *msg)
{
    perror(msg);
    printf("%s", strerror(errno));
    exit(-1);
}

int main(int argc, char *argv[])
{
    int fd;
    int cnt = 0;
    flock lock;

    /* 检查输入参数 */
    if (argc != 2)
    {
        printf("usage: %s lock_file name\n", argv[0]);
        exit(1);
    }

    /* 打开文件 */
    if ((fd = open(argv[1], O_RDWR)) == -1)
        err("cannot open the file\n");

    /* 设置文件锁 */
    lock.l_type = F_WRLCK;         /* 设置写锁 */
    lock.l_whence = SEEK_SET;   /* 从文件起始处开始 */
    lock.l_start = 0;                         /* 偏移为0 */
    lock.l_len = 0;                           /* 对整个文件加锁 */
    while (fcntl(fd, F_SETLK, &lock) < 0)
    {
        switch (errno)
        {
            case EAGAIN:
            case EACCES:
                if (++cnt < 5)
                    sleep(3);
                else
                {
                    fcntl(fd, F_GETLK, &lock);
                    printf("pid: %ld process find pid: %d lock the file %s\n", (long)getpid(), lock.l_pid, argv[1]);
                    return 1;
                }
                continue;
        }
        err("function fcntl fail.\n");
    }

    printf("pid: %ld process lock the file\n", (long)getpid());
    sleep(5);
    if (fcntl(fd, F_UNLCK) == 0)
        printf("pid: %ld process release the file\n", (long)getpid());

    return 0;
}
@
