head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2020.10.09.10.36.16;	author yungjam;	state Exp;
branches;
next	;


desc
@test fcntl function
@


1.1
log
@Initial revision
@
text
@#include <unistd.h>
#include <fcntl.h>
#include "my_err.cpp"

const char *test_file = "test_lock";

int main(void)
{
    int fd;
    struct flock region_to_lock;
    int res;

    if ((fd = open(test_file, O_RDWR | O_CREAT, 0666)) == -1)
        err("cannot open the file.");

    region_to_lock.l_type = F_RDLCK;
    region_to_lock.l_whence = SEEK_SET;
    region_to_lock.l_start = 10;
    region_to_lock.l_len = 5;
    printf("process %d trying F_RDLCK, region %d to %d\n", getpid(),
        (int )region_to_lock.l_start, (int)(region_to_lock.l_start + region_to_lock.l_len));
    if ((res = fcntl(fd, F_SETLK, &region_to_lock)) == -1)
        printf("process %d failed to lock region.\n", getpid());
    else
        printf("process %d obtained lock on region.\n", getpid());

    region_to_lock.l_type = F_UNLCK;
    region_to_lock.l_whence = SEEK_SET;
    region_to_lock.l_start = 10;
    region_to_lock.l_len = 5;
    printf("process %d trying F_UNLCK, region %d to %d\n", getpid(),
        (int)region_to_lock.l_start, (int)(region_to_lock.l_start + region_to_lock.l_len));
    if ((res = fcntl(fd, F_SETLK, &region_to_lock)) == -1)
        printf("process %d failed to unlock region.\n", getpid());
    else
        printf("process %d unlocked region.\n", getpid());

    region_to_lock.l_type = F_WRLCK;
    region_to_lock.l_whence = SEEK_SET;
    region_to_lock.l_start = 16;
    region_to_lock.l_len = 5;
    printf("process %d trying F_WRLCK, region %d to %d\n", getpid(),
        (int)region_to_lock.l_start, (int)(region_to_lock.l_start + region_to_lock.l_len));
    if ((res = fcntl(fd, F_SETLK, &region_to_lock)) == -1)
        printf("process %d failed to lock region.\n", getpid());
    else
        printf("process %d obtain lock on region.\n", getpid());

    region_to_lock.l_type = F_RDLCK;
    region_to_lock.l_whence = SEEK_SET;
    region_to_lock.l_start = 40;
    region_to_lock.l_len = 10;
    printf("process %d trying F_RDLCK, region %d to %d\n", getpid(),
        (int)region_to_lock.l_start, (int)(region_to_lock.l_start + region_to_lock.l_len));
    if ((res = fcntl(fd, F_SETLK, region_to_lock)) == -1)
        printf("process %d failed to lock region.\n", getpid());
    else
        printf("process %d obtain lock on region.\n", getpid());

    /* 等待其它进程结束或释放文件锁后对文件进行加锁 */
    region_to_lock.l_type = F_WRLCK;
    region_to_lock.l_whence = SEEK_SET;
    region_to_lock.l_start = 16;
    region_to_lock.l_len = 5;
    printf("process %d trying F_WRLCK with wait, region %d to %d\n", getpid(),
        (int)region_to_lock.l_start, (int)(region_to_lock.l_start + region_to_lock.l_len));
    if ((res = fcntl(fd, F_SETLKW, &region_to_lock)) == -1)
        printf("process %d failed to lock region.\n", getpid());
    else
        printf("process %d obtain lock on region.\n", getpid());

    printf("process %d ending.\n", getpid());
    close(fd);

    return 0;
}
@
