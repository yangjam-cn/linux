head	1.1;
access;
symbols;
locks
	yungjam:1.1; strict;
comment	@// @;


1.1
date	2020.10.04.07.52.37;	author yungjam;	state Exp;
branches;
next	;


desc
@test fstat function
@


1.1
log
@Initial revision
@
text
@#include <iostream>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/unistd.h>
#include <fcntl.h>

int main(int argc, char *argv[])
{
    struct stat file_stat;

    if (argc != 2)
    {
        perror("usgae: input filename\n");
        exit(-1);
    }

    int fd;
    if ((fd = open(argv[1], O_RDONLY)) == -1)
    {
        perror("cann't open the input file\n");
        exit(-1);
    }

    if (fstat(fd, &file_stat) == -1)
    {
        perror("fstat error!");
        exit(-1);
    }

    if (S_ISREG(file_stat.st_mode))
        std::cout << argv[1] << " is regular file, judged by S_ISREG\n";
    if (file_stat.st_mode & S_IFREG)
        std::cout << argv[1] << " is regular file, judged by S_IFREG\n";

    if (S_ISDIR(file_stat.st_mode))
        std::cout << argv[1] << " is dirctory, judged by S_ISDIR\n";
    if (file_stat.st_mode & S_IFDIR)
        std::cout << argv[1] << " is dirctory, judged by S_IFDIR\n";

    std::cout << "owner ID: " << file_stat.st_uid << ", group ID: " << file_stat.st_gid << '\n';
    std::cout << "permission: " <<  std::oct << (file_stat.st_mode & 0x1ff) << '\n';
    // std::cout << "last editor time: " << ctime(&file_stat.st_mtim) << '\n';

    return 0;
}
@
